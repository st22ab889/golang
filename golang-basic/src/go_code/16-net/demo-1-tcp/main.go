/*
1.网络编程基本介绍:Golang的主要设计目标之一就是面向大规模后端服务程序,网络通信这块是服务端程序必不可少也是至关重要的一部分.
	网络编程有两种:
		1). TCP socket 编程,是网络编程的主流.之所以叫 TCP socket 编程,是因为底层是基于 TCP/IP 协议,比如 QQ聊天
		2). B/S 结构的http编程,使用浏览器去访问服务器时,使用的就是http协议,而http底层依旧是用 TCP socket 实现, 比如 京东、淘宝购物

2. TCP socket编程的快速入门
	服务端的处理流程
		(1).监听端口,接收客户端的TCP衔接,建立客户端和服务端的衔接.
		(2).创建 goroutine,处理该衔接的请求(通常客户端会通过衔接发送请求包)
	客务端的处理流程
		(1).建立于服务端的衔接,发送请求数据,接收服务器端返回的结果数据
		(2).关闭衔接

3. TCP socket编程的快速入门应用实例
	服务器端功能:
		(1).编写一个服务器端程序,在8888端口监听
		(2).可以和多个客户端创建衔接
		(3).衔接成功后,客户端可以发送数据,服务器端接受数据,并显示在终端上
		(4).先使用telnet来测试,然后编写客户端程序来测试
	客户端功能:
		(1).编写一个客户端程序,能衔接到服务器端的8888端口
		(2).客户端可以发送单行数据,然后就退出
		(3).能通过终端输入数据(输入一行发送一行),并发送给服务器端
		(4).在终端输入 exit 表示退出程序

4. telnet 
	(1).介绍
		telnet是一个实用的远程连接命令,采用的是TCP/IP协议.它为用户提供了在本地计算机上完成远程主机工作的能力,在终端使用者的电脑上使用telnet程序,用它连接到服务器.
	    终端使用者可以在telnet程序中输入命令,这些命令会在服务器上运行,就像直接在服务器的控制台上输入一样.可以在本地就能控制服务器。
	(2).使用说明
		telnet可以专门用来测试一个端口是不是可以连接.
		使用示例:
			telnet www.xxxx.com 80	//  测试xxxx网站的80端口是否在监听
		进入telnet控制后,退出方法:
			使用 ctrl + ] 退出, 然后输入 quit 回到CMD命令界面.

*/

package main

func main() {
	// 服务器端: .\server\server.go
	// 客户端:	 .\client\client.go	

	/*
	// 1. 开启服务
		D:\GoProject\src\go_code\16-net\demo-1-tcp\server>go run server.go
		服务器开始监听....
		等待客户端来链接....
	*/

	/*
	// 2. 使用telnet测试 
		C:\Users\WuJun>telnet 127.0.0.1 8888 
	*/
	
	/*
	// 3. 开启客户端
		D:\GoProject\src\go_code\16-net\demo-1-tcp\client>go run client.go
		客户端发送了 5 字节的数据,并退出ok
		客户端发送了 3 字节的数据,并退出exit
		客户端退出..
	*/
}