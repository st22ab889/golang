/*
两种传递方式: 不管是值传递还是引用传递,传递给函数的都是变量的副本
	值传递:值传递的是值的拷贝,值拷贝的效率是由拷贝的数据大小而定,数据越大,效率越低
	引用传递:地址的拷贝,一般来说地址拷贝效率高,因为数据量小

值类型和引用类型:
	值类型:基本数据类型int系列、float系列、bool、string、数组和结构体struct
	引用类型:指针、slice切片、map、管道chan、interface等都是引用类型

值类型和引用类型特点:
	值类型默认是值传递:变量直接存储值,内存通常在栈中分配
	引用类型默认是引用传递:变量直接的是一个地址,这个地址对应的空间才真正存储数据(值),内存通常在堆上分配.当没有任何变量引用这个地址时,该地址对应的数据空间就成为一个垃圾,由GC来回收.
	如果希望函数内的变量能修改函数外的变量,可以传入变量的地址&,函数内以指针的方式操作变量.从效果上看类似引用

变量作用域:
	局部变量:作用域仅限于函数内部
	全局变量:在整个包都有效,如果其字母为大写,则作用域在整个程序有效
	变量在一个代码块中(比如for、if):那么这个变量的作用域在该代码块
*/

package main
import(
	"fmt"
)

var name = "tom"

func test01(){
	fmt.Println(name)
}

func test02()  {
	name := "jack"
	fmt.Println(name)	// 打印 jack ,因为编译器采用就近原则
}

func main() {

	test01()
	test02()
}